import React, { useState, useEffect, useRef } from 'react';
import { usePutAppointmentMutation } from '../../services/api';
import styled from 'styled-components';

/* File attributions:
 *   Any CSS styling or JSX code with extensive commenting
 *   (i.e. a comment for every CSS property or JSX tag)
 *   was generated by ChatGPT
 */

// props for the synopsis content component
interface Props {
  appointment: Appointment;
  patient: Patient;
  setPatient: any;
  synopsisText: string;
  setSynopsisText: any;
}

export default function SynopsisContent({
  appointment,
  patient,
  setPatient,
  synopsisText,
  setSynopsisText
}: Props) {
  const [modalVisible, setModalVisible] = useState(false);
  const [submissionModalVisible, setSubmissionModalVisible] = useState(false);
  const [selectedRequestType, setSelectedRequestType] = useState('');
  const [requestDescription, setRequestDescription] = useState('');
  const [updateAppointment, error] = usePutAppointmentMutation();

  const synopsisTextAreaRef = useRef(null);
  const modalTextAreaRef = useRef(null);

  // useEffect to set the cursor to the end of the textbox on render
  useEffect(() => {
    synopsisTextAreaRef.current.focus();
    const inputLength = synopsisTextAreaRef.current.value.length;
    synopsisTextAreaRef.current.setSelectionRange(inputLength, inputLength);
  }, []);

  // useEffect to set the cursor to the new request text area when modal shown
  useEffect(() => {
    if (modalVisible && modalTextAreaRef.current) {
      modalTextAreaRef.current.focus();
    }
  }, [modalVisible]);

  // Handler for request type selection
  const handleRequestTypeClick = (type: string) => {
    if (selectedRequestType === type) {
      setSelectedRequestType(''); // Deselect if the same type is clicked again
      setRequestDescription(''); // Clear description textarea
    } else {
      setSelectedRequestType(type);
      setRequestDescription('');
      document.getElementById('request-description')?.focus();
    }
  };

  // Handler for creating a new request
  const handleCreateRequest = () => {
    setSelectedRequestType('');
    setRequestDescription('');
    setModalVisible(false);
    alert(
      'This button is a placeholder- the idea is you could use it to schedule follow-ups or request things while writing your synopsis'
    );
  };

  // Handler for submitting synopsis
  const handleSynopsisSubmit = () => {
    const synopsisInputElement = document.getElementById(
      'synopsisinput'
    ) as HTMLTextAreaElement;
    if (synopsisInputElement && synopsisInputElement.value) {
      const newSynopsis = synopsisInputElement.value.trim();
      appointment.synopsis = newSynopsis;

      const index = patient.appointments.findIndex((apt) => {
        return apt._id === appointment._id;
      });
      // update stateful patient
      const newAppointments = patient.appointments;
      newAppointments[index].synopsis = newSynopsis;
      setPatient({ ...patient, appointments: newAppointments });

      // update db appointment
      updateAppointment({
        _id: appointment._id,
        delta: { synopsis: newSynopsis }
      });
      showMessage('Synopsis submitted!');
    }
  };

  // Function to display messages temporarily
  const showMessage = (text: string) => {
    setSubmissionModalVisible(true);
    setTimeout(() => {
      setSubmissionModalVisible(false);
    }, 2000);
  };

  // Handler to close modal
  const closeModal = () => {
    setModalVisible(false);
    setSelectedRequestType('');
    setRequestDescription('');
  };

  // Handler for background click
  const handleBackgroundClick = (e: React.MouseEvent) => {
    if ((e.target as HTMLElement).id === 'modal-background') {
      closeModal();
    }
  };

  // Handler for key bindings while in text fields
  const handleKeyDown = (event) => {
    if (event.metaKey && event.key === 'Enter') {
      if (modalVisible) {
        // we are in the new request modal
        handleCreateRequest();
      } else {
        handleSynopsisSubmit();
      }
    }
  };

  const CreateRequestButton = styled.button`
    background-color: #4e6316; // A distinct, yet cohesive color
    color: white;
    padding: 12px 15px; // Slightly larger padding for a bubbly appearance
    font-family: Arial, sans-serif;
    font-size: 16px; // Enhanced font size for better visibility
    border: none; // Removing the default border
    border-radius: 20px; // Increased rounded corners for a bubbly effect
    cursor: pointer; // Cursor change to indicate clickable item
    transition:
      background-color 0.3s,
      transform 0.3s; // Smooth transitions for interactive feedback
    margin-top: 20px; // Add space above the button to shift it down
    &:hover {
      background-color: #5e7316; // Darker on hover for visual feedback
      transform: translateY(-2px); // Slight lift to indicate actionability
    }
    &:active {
      background-color: #3e5116; // Even darker on active for tactile feedback
      transform: translateY(1px); // Mimicking a press-down effect
    }
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); // Soft shadow for depth
  `;

  return (
    <div style={{ position: 'relative', maxHeight: '60%' }}>
      <label>
        {' '}
        <strong>
          Provide a synopsis of your appointment below and click the submit
          button when finished, or click &quot;New Request&quot; to submit a
          request
        </strong>
        <textarea
          id="synopsisinput"
          ref={synopsisTextAreaRef}
          placeholder="Enter a synopsis for this appointment"
          style={{
            fontFamily: 'Arial, sans-serif',
            width: 'calc(100% - 14px)',
            height: 'calc(100% - 20px)',
            paddingTop: '10px',
            paddingLeft: '10px',
            paddingBottom: '10px',
            marginTop: '10px',
            borderRadius: '10px 10px 10px 10px',
            resize: 'none'
          }}
          cols={50}
          rows={28}
          autoFocus={true}
          value={synopsisText ?? ''}
          onKeyDown={handleKeyDown}
          onChange={(e) => setSynopsisText(e.target.value)}
        ></textarea>
      </label>
      <br />
      <button
        style={{
          borderRadius: '5px',
          backgroundColor: '#47619A',
          color: 'white',
          padding: '10px',
          marginTop: '10px'
        }}
        onClick={handleSynopsisSubmit}
      >
        Submit Synopsis
      </button>
      <button
        style={{
          borderRadius: '5px',
          padding: '10px',
          float: 'right',
          marginTop: '10px',
          color: 'white',
          backgroundColor: '#4e6316'
        }}
        onClick={() => setModalVisible(true)}
      >
        + New Request
      </button>

      {submissionModalVisible && (
        <SubmissionModal>
          <div style={{ color: 'white' }}>Synopsis submitted</div>
        </SubmissionModal>
      )}

      {modalVisible && (
        <div
          id="modal-background"
          onClick={handleBackgroundClick}
          style={{
            position: 'absolute',
            top: 30,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <div
            style={{
              fontFamily: 'Arial, sans-serif', // Set font to Arial
              backgroundColor: '#FFF',
              padding: 30, // Increase padding for a larger modal
              borderRadius: 10, // Increase border radius for rounded corners
              position: 'relative',
              width: '70%', // Increase modal width
              maxWidth: 500, // Set maximum modal width
              textAlign: 'center' // Center align modal content
            }}
          >
            <button
              onClick={closeModal}
              style={{ position: 'absolute', top: 5, right: 5 }}
            >
              X
            </button>
            <div style={{ marginBottom: '5px', fontSize: '20px' }}>
              Create a New Request
            </div>
            <div style={{ marginTop: '10px' }}>
              <button
                onClick={() => handleRequestTypeClick('Follow up')}
                style={{
                  fontFamily: 'Arial, sans-serif',
                  backgroundColor:
                    selectedRequestType === 'Follow up'
                      ? 'rgba(200, 200, 200, 0.8)' // Light gray when selected
                      : 'rgba(173, 216, 230, 0.8)', // Light blue when not selected
                  borderRadius: '5px',
                  padding: '12px', // Increased padding for larger buttons
                  marginRight: '10px', // Add space between buttons
                  border: 'none', // Remove border
                  cursor: 'pointer', // Change cursor to pointer
                  fontSize: '16px' // Increase font size
                }}
              >
                Follow up
              </button>
              <button
                onClick={() => handleRequestTypeClick('Referral')}
                style={{
                  fontFamily: 'Arial, sans-serif',
                  backgroundColor:
                    selectedRequestType === 'Referral'
                      ? 'rgba(200, 200, 200, 0.8)' // Light gray when selected
                      : 'rgba(173, 216, 230, 0.8)', // Light blue when not selected
                  borderRadius: '5px',
                  padding: '12px', // Increased padding for larger buttons
                  marginRight: '10px', // Add space between buttons
                  border: 'none', // Remove border
                  cursor: 'pointer', // Change cursor to pointer
                  fontSize: '16px' // Increase font size
                }}
              >
                Referral
              </button>
              <button
                onClick={() => handleRequestTypeClick('Prescription')}
                style={{
                  fontFamily: 'Arial, sans-serif',
                  backgroundColor:
                    selectedRequestType === 'Prescription'
                      ? 'rgba(200, 200, 200, 0.8)' // Light gray when selected
                      : 'rgba(173, 216, 230, 0.8)', // Light blue when not selected
                  borderRadius: '5px',
                  padding: '12px', // Increased padding for larger buttons
                  marginRight: '10px', // Add space between buttons
                  border: 'none', // Remove border
                  cursor: 'pointer', // Change cursor to pointer
                  fontSize: '16px' // Increase font size
                }}
              >
                Prescription
              </button>
              <button
                onClick={() => handleRequestTypeClick('Lab Request')}
                style={{
                  fontFamily: 'Arial, sans-serif',
                  backgroundColor:
                    selectedRequestType === 'Lab Request'
                      ? 'rgba(200, 200, 200, 0.8)' // Light gray when selected
                      : 'rgba(173, 216, 230, 0.8)', // Light blue when not selected
                  borderRadius: '5px',
                  padding: '12px', // Increased padding for larger buttons
                  marginRight: '10px', // Add space between buttons
                  border: 'none', // Remove border
                  cursor: 'pointer', // Change cursor to pointer
                  fontSize: '16px' // Increase font size
                }}
              >
                Lab Request
              </button>
            </div>
            <textarea
              id="request-description"
              ref={modalTextAreaRef}
              placeholder="Description of request"
              value={requestDescription}
              onChange={(e) => setRequestDescription(e.target.value)}
              cols={60}
              rows={10} // Increased rows for larger textarea
              style={{
                fontFamily: 'Arial, sans-serif',
                width: 'calc(100% - 20px)',
                paddingTop: '10px',
                paddingLeft: '10px',
                paddingBottom: '10px',
                marginTop: '20px',
                borderRadius: '10px', // Increase border radius
                resize: 'none',
                fontSize: '16px' // Increase font size
              }}
            />

            <br />
            <CreateRequestButton onClick={handleCreateRequest}>
              Create Request
            </CreateRequestButton>
          </div>
        </div>
      )}
    </div>
  );
}

const SubmissionModal = styled.div`
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(
    0,
    0,
    0,
    0.5
  ); /* Slightly transparent white background */
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* Shadow for the modal */
  text-align: center;
`;
